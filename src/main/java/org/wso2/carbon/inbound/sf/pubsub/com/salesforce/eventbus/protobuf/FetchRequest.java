// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubsub_api-original.proto

package org.wso2.carbon.inbound.sf.pubsub.com.salesforce.eventbus.protobuf;

/**
 * <pre>
 * Request for the Subscribe streaming RPC method. This request is used to:
 * 1. Establish the initial subscribe stream.
 * 2. Request more events from the subscription stream.
 * Flow Control is handled by the subscriber via num_requested.
 * A client can specify a starting point for the subscription with replay_preset and replay_id combinations.
 * If no replay_preset is specified, the subscription starts at LATEST (tip of the stream).
 * replay_preset and replay_id values are only consumed as part of the first FetchRequest. If
 * a client needs to start at another point in the stream, it must start a new subscription.
 * </pre>
 *
 * Protobuf type {@code eventbus.v1.FetchRequest}
 */
public final class FetchRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:eventbus.v1.FetchRequest)
    FetchRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FetchRequest.newBuilder() to construct.
  private FetchRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FetchRequest() {
    topicName_ = "";
    replayPreset_ = 0;
    replayId_ = com.google.protobuf.ByteString.EMPTY;
    authRefresh_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new FetchRequest();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return PubSubProto.internal_static_eventbus_v1_FetchRequest_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return PubSubProto.internal_static_eventbus_v1_FetchRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            FetchRequest.class, Builder.class);
  }

  public static final int TOPIC_NAME_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile Object topicName_ = "";
  /**
   * <pre>
   * Identifies a topic for subscription in the very first FetchRequest of the stream. The topic cannot change
   * in subsequent FetchRequests within the same subscribe stream, but can be omitted for efficiency.
   * </pre>
   *
   * <code>string topic_name = 1;</code>
   * @return The topicName.
   */
  @Override
  public String getTopicName() {
    Object ref = topicName_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      topicName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Identifies a topic for subscription in the very first FetchRequest of the stream. The topic cannot change
   * in subsequent FetchRequests within the same subscribe stream, but can be omitted for efficiency.
   * </pre>
   *
   * <code>string topic_name = 1;</code>
   * @return The bytes for topicName.
   */
  @Override
  public com.google.protobuf.ByteString
      getTopicNameBytes() {
    Object ref = topicName_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      topicName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int REPLAY_PRESET_FIELD_NUMBER = 2;
  private int replayPreset_ = 0;
  /**
   * <pre>
   * Subscription starting point. This is consumed only as part of the first FetchRequest
   * when the subscription is set up.
   * </pre>
   *
   * <code>.eventbus.v1.ReplayPreset replay_preset = 2;</code>
   * @return The enum numeric value on the wire for replayPreset.
   */
  @Override public int getReplayPresetValue() {
    return replayPreset_;
  }
  /**
   * <pre>
   * Subscription starting point. This is consumed only as part of the first FetchRequest
   * when the subscription is set up.
   * </pre>
   *
   * <code>.eventbus.v1.ReplayPreset replay_preset = 2;</code>
   * @return The replayPreset.
   */
  @Override public ReplayPreset getReplayPreset() {
    ReplayPreset result = ReplayPreset.forNumber(replayPreset_);
    return result == null ? ReplayPreset.UNRECOGNIZED : result;
  }

  public static final int REPLAY_ID_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString replayId_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * If replay_preset of CUSTOM is selected, specify the subscription point to start after.
   * This is consumed only as part of the first FetchRequest when the subscription is set up.
   * </pre>
   *
   * <code>bytes replay_id = 3;</code>
   * @return The replayId.
   */
  @Override
  public com.google.protobuf.ByteString getReplayId() {
    return replayId_;
  }

  public static final int NUM_REQUESTED_FIELD_NUMBER = 4;
  private int numRequested_ = 0;
  /**
   * <pre>
   * Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
   * of additional processing capacity available on the client side. There is no guarantee of equal number of
   * FetchResponse messages to be sent back. There is not necessarily a correspondence between
   * number of requested events in FetchRequest and the number of events returned in subsequent
   * FetchResponses.
   * </pre>
   *
   * <code>int32 num_requested = 4;</code>
   * @return The numRequested.
   */
  @Override
  public int getNumRequested() {
    return numRequested_;
  }

  public static final int AUTH_REFRESH_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private volatile Object authRefresh_ = "";
  /**
   * <pre>
   * For internal Salesforce use only.
   * </pre>
   *
   * <code>string auth_refresh = 5;</code>
   * @return The authRefresh.
   */
  @Override
  public String getAuthRefresh() {
    Object ref = authRefresh_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      authRefresh_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * For internal Salesforce use only.
   * </pre>
   *
   * <code>string auth_refresh = 5;</code>
   * @return The bytes for authRefresh.
   */
  @Override
  public com.google.protobuf.ByteString
      getAuthRefreshBytes() {
    Object ref = authRefresh_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      authRefresh_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(topicName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, topicName_);
    }
    if (replayPreset_ != ReplayPreset.LATEST.getNumber()) {
      output.writeEnum(2, replayPreset_);
    }
    if (!replayId_.isEmpty()) {
      output.writeBytes(3, replayId_);
    }
    if (numRequested_ != 0) {
      output.writeInt32(4, numRequested_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(authRefresh_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, authRefresh_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(topicName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, topicName_);
    }
    if (replayPreset_ != ReplayPreset.LATEST.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, replayPreset_);
    }
    if (!replayId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, replayId_);
    }
    if (numRequested_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, numRequested_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(authRefresh_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, authRefresh_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof FetchRequest)) {
      return super.equals(obj);
    }
    FetchRequest other = (FetchRequest) obj;

    if (!getTopicName()
        .equals(other.getTopicName())) return false;
    if (replayPreset_ != other.replayPreset_) return false;
    if (!getReplayId()
        .equals(other.getReplayId())) return false;
    if (getNumRequested()
        != other.getNumRequested()) return false;
    if (!getAuthRefresh()
        .equals(other.getAuthRefresh())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TOPIC_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getTopicName().hashCode();
    hash = (37 * hash) + REPLAY_PRESET_FIELD_NUMBER;
    hash = (53 * hash) + replayPreset_;
    hash = (37 * hash) + REPLAY_ID_FIELD_NUMBER;
    hash = (53 * hash) + getReplayId().hashCode();
    hash = (37 * hash) + NUM_REQUESTED_FIELD_NUMBER;
    hash = (53 * hash) + getNumRequested();
    hash = (37 * hash) + AUTH_REFRESH_FIELD_NUMBER;
    hash = (53 * hash) + getAuthRefresh().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static FetchRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FetchRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FetchRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FetchRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FetchRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FetchRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FetchRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static FetchRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static FetchRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static FetchRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static FetchRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static FetchRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(FetchRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Request for the Subscribe streaming RPC method. This request is used to:
   * 1. Establish the initial subscribe stream.
   * 2. Request more events from the subscription stream.
   * Flow Control is handled by the subscriber via num_requested.
   * A client can specify a starting point for the subscription with replay_preset and replay_id combinations.
   * If no replay_preset is specified, the subscription starts at LATEST (tip of the stream).
   * replay_preset and replay_id values are only consumed as part of the first FetchRequest. If
   * a client needs to start at another point in the stream, it must start a new subscription.
   * </pre>
   *
   * Protobuf type {@code eventbus.v1.FetchRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:eventbus.v1.FetchRequest)
          FetchRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return PubSubProto.internal_static_eventbus_v1_FetchRequest_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return PubSubProto.internal_static_eventbus_v1_FetchRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FetchRequest.class, Builder.class);
    }

    // Construct using com.salesforce.eventbus.protobuf.FetchRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      topicName_ = "";
      replayPreset_ = 0;
      replayId_ = com.google.protobuf.ByteString.EMPTY;
      numRequested_ = 0;
      authRefresh_ = "";
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return PubSubProto.internal_static_eventbus_v1_FetchRequest_descriptor;
    }

    @Override
    public FetchRequest getDefaultInstanceForType() {
      return FetchRequest.getDefaultInstance();
    }

    @Override
    public FetchRequest build() {
      FetchRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public FetchRequest buildPartial() {
      FetchRequest result = new FetchRequest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(FetchRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.topicName_ = topicName_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.replayPreset_ = replayPreset_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.replayId_ = replayId_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.numRequested_ = numRequested_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.authRefresh_ = authRefresh_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof FetchRequest) {
        return mergeFrom((FetchRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(FetchRequest other) {
      if (other == FetchRequest.getDefaultInstance()) return this;
      if (!other.getTopicName().isEmpty()) {
        topicName_ = other.topicName_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.replayPreset_ != 0) {
        setReplayPresetValue(other.getReplayPresetValue());
      }
      if (other.getReplayId() != com.google.protobuf.ByteString.EMPTY) {
        setReplayId(other.getReplayId());
      }
      if (other.getNumRequested() != 0) {
        setNumRequested(other.getNumRequested());
      }
      if (!other.getAuthRefresh().isEmpty()) {
        authRefresh_ = other.authRefresh_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              topicName_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              replayPreset_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              replayId_ = input.readBytes();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 32: {
              numRequested_ = input.readInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 42: {
              authRefresh_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private Object topicName_ = "";
    /**
     * <pre>
     * Identifies a topic for subscription in the very first FetchRequest of the stream. The topic cannot change
     * in subsequent FetchRequests within the same subscribe stream, but can be omitted for efficiency.
     * </pre>
     *
     * <code>string topic_name = 1;</code>
     * @return The topicName.
     */
    public String getTopicName() {
      Object ref = topicName_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        topicName_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Identifies a topic for subscription in the very first FetchRequest of the stream. The topic cannot change
     * in subsequent FetchRequests within the same subscribe stream, but can be omitted for efficiency.
     * </pre>
     *
     * <code>string topic_name = 1;</code>
     * @return The bytes for topicName.
     */
    public com.google.protobuf.ByteString
        getTopicNameBytes() {
      Object ref = topicName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        topicName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Identifies a topic for subscription in the very first FetchRequest of the stream. The topic cannot change
     * in subsequent FetchRequests within the same subscribe stream, but can be omitted for efficiency.
     * </pre>
     *
     * <code>string topic_name = 1;</code>
     * @param value The topicName to set.
     * @return This builder for chaining.
     */
    public Builder setTopicName(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      topicName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Identifies a topic for subscription in the very first FetchRequest of the stream. The topic cannot change
     * in subsequent FetchRequests within the same subscribe stream, but can be omitted for efficiency.
     * </pre>
     *
     * <code>string topic_name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTopicName() {
      topicName_ = getDefaultInstance().getTopicName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Identifies a topic for subscription in the very first FetchRequest of the stream. The topic cannot change
     * in subsequent FetchRequests within the same subscribe stream, but can be omitted for efficiency.
     * </pre>
     *
     * <code>string topic_name = 1;</code>
     * @param value The bytes for topicName to set.
     * @return This builder for chaining.
     */
    public Builder setTopicNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      topicName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private int replayPreset_ = 0;
    /**
     * <pre>
     * Subscription starting point. This is consumed only as part of the first FetchRequest
     * when the subscription is set up.
     * </pre>
     *
     * <code>.eventbus.v1.ReplayPreset replay_preset = 2;</code>
     * @return The enum numeric value on the wire for replayPreset.
     */
    @Override public int getReplayPresetValue() {
      return replayPreset_;
    }
    /**
     * <pre>
     * Subscription starting point. This is consumed only as part of the first FetchRequest
     * when the subscription is set up.
     * </pre>
     *
     * <code>.eventbus.v1.ReplayPreset replay_preset = 2;</code>
     * @param value The enum numeric value on the wire for replayPreset to set.
     * @return This builder for chaining.
     */
    public Builder setReplayPresetValue(int value) {
      replayPreset_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Subscription starting point. This is consumed only as part of the first FetchRequest
     * when the subscription is set up.
     * </pre>
     *
     * <code>.eventbus.v1.ReplayPreset replay_preset = 2;</code>
     * @return The replayPreset.
     */
    @Override
    public ReplayPreset getReplayPreset() {
      ReplayPreset result = ReplayPreset.forNumber(replayPreset_);
      return result == null ? ReplayPreset.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Subscription starting point. This is consumed only as part of the first FetchRequest
     * when the subscription is set up.
     * </pre>
     *
     * <code>.eventbus.v1.ReplayPreset replay_preset = 2;</code>
     * @param value The replayPreset to set.
     * @return This builder for chaining.
     */
    public Builder setReplayPreset(ReplayPreset value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      replayPreset_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Subscription starting point. This is consumed only as part of the first FetchRequest
     * when the subscription is set up.
     * </pre>
     *
     * <code>.eventbus.v1.ReplayPreset replay_preset = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearReplayPreset() {
      bitField0_ = (bitField0_ & ~0x00000002);
      replayPreset_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString replayId_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * If replay_preset of CUSTOM is selected, specify the subscription point to start after.
     * This is consumed only as part of the first FetchRequest when the subscription is set up.
     * </pre>
     *
     * <code>bytes replay_id = 3;</code>
     * @return The replayId.
     */
    @Override
    public com.google.protobuf.ByteString getReplayId() {
      return replayId_;
    }
    /**
     * <pre>
     * If replay_preset of CUSTOM is selected, specify the subscription point to start after.
     * This is consumed only as part of the first FetchRequest when the subscription is set up.
     * </pre>
     *
     * <code>bytes replay_id = 3;</code>
     * @param value The replayId to set.
     * @return This builder for chaining.
     */
    public Builder setReplayId(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      replayId_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If replay_preset of CUSTOM is selected, specify the subscription point to start after.
     * This is consumed only as part of the first FetchRequest when the subscription is set up.
     * </pre>
     *
     * <code>bytes replay_id = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearReplayId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      replayId_ = getDefaultInstance().getReplayId();
      onChanged();
      return this;
    }

    private int numRequested_ ;
    /**
     * <pre>
     * Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
     * of additional processing capacity available on the client side. There is no guarantee of equal number of
     * FetchResponse messages to be sent back. There is not necessarily a correspondence between
     * number of requested events in FetchRequest and the number of events returned in subsequent
     * FetchResponses.
     * </pre>
     *
     * <code>int32 num_requested = 4;</code>
     * @return The numRequested.
     */
    @Override
    public int getNumRequested() {
      return numRequested_;
    }
    /**
     * <pre>
     * Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
     * of additional processing capacity available on the client side. There is no guarantee of equal number of
     * FetchResponse messages to be sent back. There is not necessarily a correspondence between
     * number of requested events in FetchRequest and the number of events returned in subsequent
     * FetchResponses.
     * </pre>
     *
     * <code>int32 num_requested = 4;</code>
     * @param value The numRequested to set.
     * @return This builder for chaining.
     */
    public Builder setNumRequested(int value) {
      
      numRequested_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
     * of additional processing capacity available on the client side. There is no guarantee of equal number of
     * FetchResponse messages to be sent back. There is not necessarily a correspondence between
     * number of requested events in FetchRequest and the number of events returned in subsequent
     * FetchResponses.
     * </pre>
     *
     * <code>int32 num_requested = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearNumRequested() {
      bitField0_ = (bitField0_ & ~0x00000008);
      numRequested_ = 0;
      onChanged();
      return this;
    }

    private Object authRefresh_ = "";
    /**
     * <pre>
     * For internal Salesforce use only.
     * </pre>
     *
     * <code>string auth_refresh = 5;</code>
     * @return The authRefresh.
     */
    public String getAuthRefresh() {
      Object ref = authRefresh_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        authRefresh_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * For internal Salesforce use only.
     * </pre>
     *
     * <code>string auth_refresh = 5;</code>
     * @return The bytes for authRefresh.
     */
    public com.google.protobuf.ByteString
        getAuthRefreshBytes() {
      Object ref = authRefresh_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        authRefresh_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * For internal Salesforce use only.
     * </pre>
     *
     * <code>string auth_refresh = 5;</code>
     * @param value The authRefresh to set.
     * @return This builder for chaining.
     */
    public Builder setAuthRefresh(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      authRefresh_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For internal Salesforce use only.
     * </pre>
     *
     * <code>string auth_refresh = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearAuthRefresh() {
      authRefresh_ = getDefaultInstance().getAuthRefresh();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For internal Salesforce use only.
     * </pre>
     *
     * <code>string auth_refresh = 5;</code>
     * @param value The bytes for authRefresh to set.
     * @return This builder for chaining.
     */
    public Builder setAuthRefreshBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      authRefresh_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:eventbus.v1.FetchRequest)
  }

  // @@protoc_insertion_point(class_scope:eventbus.v1.FetchRequest)
  private static final FetchRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new FetchRequest();
  }

  public static FetchRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FetchRequest>
      PARSER = new com.google.protobuf.AbstractParser<FetchRequest>() {
    @Override
    public FetchRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<FetchRequest> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<FetchRequest> getParserForType() {
    return PARSER;
  }

  @Override
  public FetchRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

